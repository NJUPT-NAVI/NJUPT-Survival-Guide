name: CI Release & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

concurrency:
  group: main-ci
  cancel-in-progress: true

jobs:
  shellcheck:
    name: ShellCheck 🛠
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: 🐚 Full ShellCheck
        uses: redhat-plumbers-in-action/differential-shellcheck@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          triggering-event: ${{ github.event_name }}
          strict-check-on-push: true
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          severity: error

  build-test:
    name: Pre-Build 验证
    runs-on: ubuntu-latest
    needs: [shellcheck]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: 安装依赖
        run: npm ci
      - name: 试构建
        run: npm run build

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [build-test]
    outputs:
      released: ${{ steps.mark.outputs.released }}
      version:  ${{ steps.mark.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: 安装依赖
        run: npm ci
      - name: 运行 semantic-release
        id: sr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          npx semantic-release || echo "NO_RELEASE"
      - name: 标记发布结果
        id: mark
        run: |
          set -e
          msg="$(git log -1 --pretty=%s)"
          if [[ "$msg" =~ ^chore\(release\):\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            ver="${BASH_REMATCH[1]}"
            echo "released=true"  >> "$GITHUB_OUTPUT"
            echo "version=$ver"   >> "$GITHUB_OUTPUT"
          else
            ver=$(node -p "require('./package.json').version")
            echo "released=false" >> "$GITHUB_OUTPUT"
            echo "version=$ver"   >> "$GITHUB_OUTPUT"
          fi
          echo "最后提交信息: $msg"
          echo "识别版本: $ver"

  build-and-deploy:
    name: Build & Deploy (always)
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ !cancelled() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: 同步远端
        run: |
          git fetch origin main --tags
          git checkout main
          git reset --hard origin/main
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: 安装依赖
        run: npm ci
      - name: 赋予权限
        run: chmod +x scripts/sync-dist.sh || true
      - name: 构建
        env:
          CONTRIBUTOR_INFORMATION_TOKEN: ${{ secrets.CONTRIBUTOR_INFORMATION_TOKEN }}
        run: npm run build
      - name: 部署
        env:
          DEPLOY_REPO_TOKEN: ${{ secrets.DEPLOY_REPO_TOKEN }}
        run: bash scripts/sync-dist.sh dist
      - name: 输出信息
        run: |
          echo "是否产生新版本: ${{ needs.release.outputs.released }}"
          echo "版本号: ${{ needs.release.outputs.version }}"